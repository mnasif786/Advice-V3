var taskController = function ($rootScope, $scope, $window, taskService, userService, configService, $filter, $timeout, $interval, $q, $modal, enums)
{
    $rootScope.checkForNewVersion($window);

    /********** Start Of Variable Declaration Section *************/
    
    $scope.teamList         = [];
    $scope.userList = [];
    $scope.allUsersList = [];

   
    $scope.selectedTeams = [];
    $scope.selectedUser = "";

    
    $scope.teamTimelineTotals = "";
    $scope.userTimelineTotals = "";

    $scope.selectedTeamsIds = "";
    $scope.taskDetailsData = "";
    $scope.taskTypes = "";
    $scope.selectedGridItemIndex = null;

    $scope.selectedTaskListType = null;
    $scope.hasUserDeletePermission = false;
    $scope.hasUserResetPermission = false;

    var slaBallTypes = { Red: 'Red', Amber: 'Amber', Green: 'Green', Platinum: 'Platinum' };
    var taskListType = { Team: 'Team', User: 'User' };
    
    var automaticRefreshTime = 90000;
    var teamTasksUpToDate = true;
    var userTasksUpToDate = true;
    var filterTypes = { Red: 'Red', Amber: 'Amber', Green: 'Green', Platinum: 'Platinum', None: 'None', Delete: 'Delete' };
    $scope.currentFilterType = filterTypes.None;
    $scope.preSelectedFilterType = filterTypes.None;
    $scope.preSelectedTaskSearchResultData = null;    
    var bulkDelete = false;
    var bulkTasksSendToOutlook = false;
    $scope.taskSelection = [];
    var dropDownChosenType = { BulkDelete: 'BulkDelete', BulkReassign: 'BulkReassign', SendToOutlook: 'SendToOutlook', ShowDeleted: 'ShowDeleted', ClearFilters:'ClearFilters', HideDeleted:'HideDeleted'};

  

    // SG: FOR DEV ONLY
    $scope.dev_tasklist = "";

    $scope.advice2CompleteNotRemove = '';
    $scope.advice2CompleteAndRemove = '';

    /********** End Of Variable Declaration section *************/

    $scope.refreshTaskList = function() {
       // Update Timelines and users
       $scope.selectedTeamsUpdateDetails();
       $scope.selectedUserUpdateDetails();
      

        // Update details of currently selected task list
        if ($scope.selectedTaskListType != null) {
            
            if ($scope.selectedTaskListType == taskListType.Team) {
                if ($scope.currentFilterType == filterTypes.None) {
                    $scope.showTasklistForTeam();
                }
                else if ($scope.currentFilterType == filterTypes.Delete) {
                    $scope.ShowDeletedTasksByTeams();
                } else {
                    teamTasksUpToDate = false;
                    $scope.filterOnTeamsBalls($scope.currentFilterType);
                }

            } else {
                if ($scope.currentFilterType == filterTypes.None) {
                    $scope.showTasklistForUser();
                } else if ($scope.currentFilterType == filterTypes.Delete) {
                    $scope.ShowDeletedTasksByUser();
                } else {
                    userTasksUpToDate = false;
                    $scope.filterOnUsersBalls($scope.currentFilterType);
                }
            }
        }
    };
    
    $scope.isCancelledTask = function (item) {
        if (item && (item.Cancelled == true && item.Deleted == false && item.Completed == false))
            return true;

        return false;
    }

    var refreshTime = $interval($scope.refreshTaskList, automaticRefreshTime);

    $scope.setDropDowntype = function (dropDownSelection) {
        if (dropDownSelection == dropDownChosenType.BulkDelete)
            $scope.taskSelection = []; //when bulk switched after selection
            bulkTasksSendToOutlook = false;
            setBulkDelete();
        if (dropDownSelection == dropDownChosenType.BulkReassign) {
            bulkDelete = false;
            bulkTasksSendToOutlook = false;
        }
        if (dropDownSelection == dropDownChosenType.SendToOutlook) {
            $scope.taskSelection = []; //when bulk switched after selection
            bulkDelete = false;
            setBulkTasksSendToOutlook();
        }
        if (dropDownSelection == dropDownChosenType.ClearFilters) {
            bulkDelete = false;
            bulkTasksSendToOutlook = false;
        }
        if (dropDownSelection == dropDownChosenType.ShowDeleted) {
            bulkDelete = false;
            bulkTasksSendToOutlook = false;
            $scope.ShowDeletedTasks();
            
        }
        if (dropDownSelection == dropDownChosenType.HideDeleted) {
            bulkDelete = false;
            bulkTasksSendToOutlook = false;
            $scope.HideDeletedTasks();
        }
    }

    var setBulkDelete = function () {
        
        if ($scope.taskSearchResultData.length > 0 && $scope.taskSearchResultData)
            bulkDelete = !bulkDelete;
    }

    $scope.getBulkDelete = function() {
         return bulkDelete;
    }

    var setBulkTasksSendToOutlook = function () {

        if ($scope.taskSearchResultData.length > 0 && $scope.taskSearchResultData)
            bulkTasksSendToOutlook = !bulkTasksSendToOutlook;
    }

    $scope.getBulkTasksSendToOutlook = function () {
        return bulkTasksSendToOutlook;
    }

    var setTeamTasksUpToDate = function () { teamTasksUpToDate = true; }

    var setUserTasksUpToDate = function () { userTasksUpToDate = true; }

    $scope.setFilterType = function(type) {
        $scope.currentFilterType = type;
    }

    $scope.getTaskListType = function() {
        return $scope.selectedTaskListType;
    };

    var updateLastTaskListSelection = function (selection) {
        $scope.selectedTaskListType = taskListType[selection];
    };

    

    $scope.updateSelectedTeamIds = function() {
        //$scope.dev_tasklist = "Tasklist for Teams: ";
        $scope.selectedTeamsIds = "";
        angular.forEach($scope.selectedTeams, function (team, key) {
            //$scope.dev_tasklist += " - " + team.Description;
            $scope.selectedTeamsIds = constructQueryString($scope.selectedTeamsIds) + team.TeamId;
        });
    };

    $scope.selectedTeamsUpdateDetails = function () {
        if ($scope.selectedTeams.length == 0) {
            $scope.teamTimelineTotals = [];

            var lastTaskListSelected = $scope.getTaskListType();
            if (lastTaskListSelected == taskListType.Team || !lastTaskListSelected) {
                //$scope.taskSearchResultData = "";
                clearGridAndTaskDetailData();
            };
            
            ShowAllUsers();
            teamTasksUpToDate = false;
            return;
        }
        
        $scope.activityMonitor.TeamTimeLineSearchInProgress = true;

        var selectedTeamsIds = "";
        angular.forEach($scope.selectedTeams, function (team, key) {
            selectedTeamsIds = constructQueryString(selectedTeamsIds) + team.TeamId;
        });

        taskService.GetTimelineForTeams(selectedTeamsIds)
            .then(function (teamTimeline)
            {
                $scope.teamTimelineTotals = teamTimeline.data;
                
                $scope.activityMonitor.TeamTimeLineSearchInProgress = false;

                userService.GetUsersByTeams($scope.selectedTeams)
                .then(function (userList)
                {
                    $scope.userList = userList;
                    addMyTaskListToUserList();

                    //if selected user is not found in the userlist then update selected user and userTimelineTotals to empty
                    var found = false;
                    angular.forEach($scope.userList, function (user, key) {
                        if (user.UserId == $scope.selectedUser.UserId) {
                            found = true;
                        }
                    });

                    if (!found) {
                        $scope.selectedUser = "";
                        $scope.userTimelineTotals = "";
                    }
                });
            });        
    }

    // Hack because the multiselect dropdown doesn't fire selectedUserUpdateDetails() when item unchecked
    $scope.checkUserUnchecked = function() {
        if (!$scope.selectedUser) {
            $scope.userTimelineTotals = "";
            userTasksUpToDate = false;
        }
    };

    $scope.selectedUserUpdateDetails = function ()
    {
        if (!$.isEmptyObject($scope.selectedUser)) {

            $scope.activityMonitor.UserTimeLineSearchInProgress = true;
            
            taskService
                .GetTimelineForUser($scope.selectedUser.Username)
                .then(function (userTimeline)
                {
                    $scope.userTimelineTotals = userTimeline.data;
                    $scope.activityMonitor.UserTimeLineSearchInProgress = false;
                });
           userTasksUpToDate = false;
        } else {
            $scope.userTaskSearchResultFromDatabase = [];
        }
    }
    
   $scope.showTasklistForUser = function()
   {
       //$scope.dev_tasklist = "Tasklist for User: " + $scope.selectedUser.Username;
       if (!isNullOrUndefined($scope.selectedUser) && !isNullOrEmptyString($scope.selectedUser.Username)) {
           $scope.getTasksByUser($scope.selectedUser.Username);
       }
        
    }
  
    $scope.showTasklistForTeam = function () {
        $scope.updateSelectedTeamIds();
        if (!isNullOrEmptyString($scope.selectedTeamsIds)) {
            $scope.getTasksByTeams($scope.selectedTeamsIds);
        }
        
    }

    var constructQueryString = function(value) {
        if (value === "") {
            return "id=" + value;
        } else {
            return value +"&id=";
        }
    }

    var updateDropDownlists = function () {

        /* TEAM LIST*/
        userService.GetTeams()
            .then(function (data)
            {
                $scope.teamList = data;

                var loggedInUser = $rootScope.loggedInUser;
                
                if (!isNullOrUndefined(loggedInUser) && loggedInUser.Permissions.ViewOtherTaskLists) {
                    var team = angular.copy(loggedInUser.Team);
                    team.Description = "My Team";
                    team.IsSpecial = true;
                    $scope.teamList.splice(0, 0, team);
                }
            });        

        
        /* USER LIST */
        ShowAllUsers();
    }

    /* USER LIST */
    var ShowAllUsers = function ()
    {
        var promise = userService.GetUsers();
        promise.then(function (result) {
            
            $scope.userList = result;
            $scope.allUsersList = result;

            addMyTaskListToUserList();
            
        });
    }

    var addMyTaskListToUserList = function () {

        if ($scope.userList.length > 0 && $scope.userList[0].DisplayName != 'My Task List') {

            var loggedInUser = $rootScope.loggedInUser;

            if (!isNullOrUndefined(loggedInUser) && loggedInUser.Permissions.ViewOtherTaskLists) {
                var user = angular.copy(loggedInUser);
                user.DisplayName = 'My Task List';
                $scope.userList.splice(0, 0, user);
            }
        }
    }

    $scope.getSynchronousTasksByTeams = function () {
        var deferred = $q.defer();
        console.log('getSynchronousTasksByTeams called.');
        $scope.activityMonitor.TasksSearchByTeamInProgress = true;
        
        var promise = taskService.GetTasksByTeams($scope.selectedTeamsIds);
        promise.then(function (result) {
            if (result.success) {
                $scope.teamTaskSearchResultFromDatabase = result.data;
                updateGridsDataFromDatabase(result.data);
                updateLastTaskListSelection(taskListType.Team);
                $scope.activityMonitor.TasksSearchByTeamInProgress = false;
                setTeamTasksUpToDate();
            }

            deferred.resolve(result);
        });

        return deferred.promise;
    }

    $scope.getSynchronousTasksByUsers = function () {
        var deferred = $q.defer();
        console.log('getSynchronousTasksByUsers called.');
        $scope.activityMonitor.TasksSearchByUserInProgress = true;

        var promise = taskService.GetTasksByUser($scope.selectedUser.Username);
        promise.then(function (result) {
            if (result.success) {
                $scope.userTaskSearchResultFromDatabase = result.data;
                updateGridsDataFromDatabase(result.data);
                updateLastTaskListSelection(taskListType.User);
                $scope.activityMonitor.TasksSearchByUserInProgress = false;
                setUserTasksUpToDate();
            }

            deferred.resolve(result);
        });

        return deferred.promise;
    }

    $scope.getTasksByTeams = function (teamIds) {
        console.log('getTasksByTeams called.');

        $scope.activityMonitor.TasksSearchByTeamInProgress = true;
        
        var promise = taskService.GetTasksByTeams(teamIds);
        promise.then(function (result) {
            if (result.success) {
                $scope.teamTaskSearchResultFromDatabase = result.data;
                updateGridsDataFromDatabase(result.data);
                $scope.setFilterType(filterTypes.None);
                updateLastTaskListSelection(taskListType.Team);
                $scope.activityMonitor.TasksSearchByTeamInProgress = false;
                setTeamTasksUpToDate();
            }
        });
    }
   
    $scope.getTasksByUser = function (userName) {
        console.log('getTasksByUser called.');

        $scope.activityMonitor.TasksSearchByUserInProgress = true;
        
        var promise = taskService.GetTasksByUser(userName);
        promise.then(function (result) {
            if (result.success) {
                $scope.userTaskSearchResultFromDatabase = result.data;
                updateGridsDataFromDatabase(result.data);
                $scope.setFilterType(filterTypes.None);
                updateLastTaskListSelection(taskListType.User);
                $scope.activityMonitor.TasksSearchByUserInProgress = false;
                setUserTasksUpToDate();
            }
        });
    }

    $scope.RestoreMessageToOutlook = function (taskDetails) {
        if ($scope.activityMonitor.TaskSendToOutlookkInProgress == false) {
            console.log('RestoreMessageToOutlook called.');
            if (taskDetails.EmailTask == null) {
                $window.alert('Task is not an Email Task');
                return;
            }

            $scope.activityMonitor.TaskSendToOutlookkInProgress = true;

            var promise = taskService.RestoreMessageToOutlook(taskDetails.TaskId, taskDetails.EmailTask.MessageId);
            promise.then(function (result) {
                $scope.activityMonitor.TaskSendToOutlookkInProgress = false;
                if (result.success) {
                    updateUI();
                } else {
                    $window.alert('Email was not restored to outlook');
                }
            });
        }
    };

    $scope.DeleteTaskById = function (taskId) {
        var options = {
            "Heading": 'Confirm',
            "Message": 'Are you sure you want to delete this task?',
            "ShowYesButton": true,
            "ShowNoButton": true
        };

        var modalInstance = $modal.open({
            scope: $scope,
            templateUrl: 'Angular/Views/NgTemplates/genericConfirmationPopup.html',
            controller: genericConfirmationPopupController,
            resolve: {
                Options: function () {
                    return options;
                }
            }
        });

        modalInstance.result.then(function() {
            //Yes clicked
            $scope.activityMonitor.TaskDeleteInProgress = true;
            var promise = taskService.DeleteTaskById(taskId);

            promise.then(function (result) {
                if (result.success) {
                    updateUI();

                } else {
                    $window.alert('Task could not be deleted');
                }

                $scope.activityMonitor.TaskDeleteInProgress = false;
            });
        }, function() {
            //No clicked.
        });
    };

    var updateUI = function () {

        var selectedTask = $scope.SelectedTasks[0]; //First item in the array of currenty Selected tasks
        $scope.taskDetailsData = null; //Task Detail section would be gone
        $scope.taskSearchResultData.splice($scope.selectedGridItemIndex, 1); //Removes from the current task collection

        //Updates the timeline counters
        updateTimelineCounters(selectedTask.Status, $scope.teamTimelineTotals);
        updateTimelineCounters(selectedTask.Status, $scope.userTimelineTotals);
    }

    var updateTimelineCounters = function (status, timelineTotals) {
        if (timelineTotals != '' && timelineTotals.Total > 0) {
            timelineTotals.Total--;
            switch (status) {
                case 'Red':
                    timelineTotals.Red--;
                    break;
                case 'Green':
                    timelineTotals.Green--;
                    break;
                case 'Amber':
                    timelineTotals.Amber--;
                    break;
                case 'Platinum':
                    timelineTotals.Platinum--;
                    break;
                default:
            }
        }
    }

    $scope.resetSla = function (taskDetailsData) {

        var taskDetails = {
            "TaskId": taskDetailsData.TaskId,
            "DueDate": taskDetailsData.DueDate
        };

        var modalInstance = $modal.open({
            scope: $scope,
            templateUrl: 'Angular/Views/Partials/Forms/_resetSlaForm.html',
            controller: resetSlaController,
            resolve: {
                TaskDetails: function () {
                    return taskDetails;
                }
            }
        });

        modalInstance.result.then(function (resetTaskSlaModel) {
            //Reset Task button clicked
            var data = resetTaskSlaModel;
            var promise = taskService.ResetTaskSla(resetTaskSlaModel);
            promise.then(function (result) {
                if (result.success) {
                    taskDetailsData.DueDate = $filter('date')(new Date(resetTaskSlaModel.DueDate), 'dd/MM/yyyy HH:mm');
                } else {
                    $window.alert('Sorry!! Task SLA could not be reset');
                }
            });
        }, function () {
            //Cancel clicked.
        });
    };


    var getTaskDetailsByTaskId = function (taskId) {
        $scope.taskDetailsData = null;
        var promise = taskService.GetTaskDetailsByTaskId(taskId);
        promise.then(function (result) {
            if (result.success) {
                $scope.taskDetailsData = result.data;
                getUserDeletePermission($scope.taskDetailsData);
                getUserResetPermission();

                var completeButtonsUrl = getAdvice2CompleteButtonsUrl($scope.taskDetailsData);
                $scope.advice2CompleteNotRemove = completeButtonsUrl;
                $scope.advice2CompleteAndRemove = completeButtonsUrl + "&CompleteTaskOnActionSave=true";
            }
        });
    }

    var getAdvice2CompleteButtonsUrl = function(taskDetail) {
        var url = configService.getConfig().advice2Root;
        if (taskDetail.RecordedClientId != null) {
            url = url + "ClientDetailSummary.aspx?TaskID=" + taskDetail.TaskId + "&CustomerID=" + taskDetail.RecordedClientId;
        } else {
            url = url + "ClientSearch.aspx?TaskID=" + taskDetail.TaskId;
        }
        return url;
    }

    $scope.getTaskHistoryByTaskId = function (taskId) {
        $scope.taskHistory = null;
        var promise = taskService.GetTaskHistoryByTaskId(taskId);
        promise.then(function (result) {
            if (result.success) {
                $scope.taskHistory = result.data;
                $('#taskHistoryModal').modal('show');
            }
        });
    }
    
    //Array of currently Selected tasks
    $scope.SelectedTasks = [{ "TaskId": 0 }];

    $scope.$watch("SelectedTasks[0].TaskId", function () {
        var task = $scope.SelectedTasks[0];

        if (task && task.TaskId > 0 ) {
            getTaskDetailsByTaskId(task.TaskId);
        }
    });

    $scope.setSelectedTaskIndex = function (index) {
        $scope.selectedGridItemIndex = index;
    }

    var updateGridsDataFromDatabase = function(data) {
        $scope.taskSearchResultData = data;
    };

    $scope.ShowSelectedTaskIndex = function () {
        $window.alert($scope.selectedGridItemIndex);
    }


    $scope.filterOnTeamsBalls = function (ballColour)
    {
        // dont filter when no teams selected
        if ($scope.selectedTeams.length == 0)
            return;

        // if tasks not loaded yet for chosen teams load and apply filter
        if (!$scope.teamTaskSearchResultFromDatabase || $scope.teamTaskSearchResultFromDatabase.length == 0 || teamTasksUpToDate == false)
        {
            $scope.updateSelectedTeamIds();
            var promise = $scope.getSynchronousTasksByTeams();
            promise.then(function (result)
            {
                if (result.success)
                    $scope.taskSearchResultData = $filter('filter')($scope.teamTaskSearchResultFromDatabase, { "Status": slaBallTypes[ballColour] }, true);

                $scope.setFilterType(ballColour);
            });
        }
        // tasks already loaded for teams so just apply filter
        else {
            if ($scope.teamTaskSearchResultFromDatabase && $scope.teamTaskSearchResultFromDatabase.length > 0)
                $scope.taskSearchResultData = $filter('filter')($scope.teamTaskSearchResultFromDatabase, { "Status": slaBallTypes[ballColour] }, true);

            $scope.setFilterType(ballColour);
        }
    }
   
    $scope.filterOnUsersBalls = function (ballColour) {
        // dont filter when no teams selected
        if ($scope.selectedUser.length == 0)
            return;

        // if tasks not loaded yet for chosen user load and apply filter
        if (!$scope.userTaskSearchResultFromDatabase || $scope.userTaskSearchResultFromDatabase.length == 0 || userTasksUpToDate == false) {
            var promise = $scope.getSynchronousTasksByUsers();
            promise.then(function (result)
            {
                if (result.success)
                    $scope.taskSearchResultData = $filter('filter')($scope.userTaskSearchResultFromDatabase, { "Status": slaBallTypes[ballColour] }, true);

                $scope.setFilterType(ballColour);
            });
        }
        else
        {
            if ($scope.userTaskSearchResultFromDatabase && $scope.userTaskSearchResultFromDatabase.length > 0)
                $scope.taskSearchResultData = $filter('filter')($scope.userTaskSearchResultFromDatabase, { "Status": slaBallTypes[ballColour] }, true);

            $scope.setFilterType(ballColour);
        }
    }

    $scope.filterOnSummaryBalls = function (ballColour) {
        $scope.taskSearchResultData = $filter('filter')($scope.summaryTaskSearchResultFromDatabase, { "Status": slaBallTypes[ballColour] }, true);
    }

    $scope.ShowDeletedTasks = function() {
        if ($scope.selectedTaskListType != null) {

            //Data already bound to Grid
            $scope.preSelectedTaskSearchResultData = $scope.taskSearchResultData;

            switch ($scope.selectedTaskListType) {
                case 'Team':
                    $scope.ShowDeletedTasksByTeams();
                    break;
                case 'User':
                    $scope.ShowDeletedTasksByUser();
                    break;
                default:
            }

            $scope.preSelectedFilterType = $scope.currentFilterType == null ? filterTypes.None : $scope.currentFilterType;
            
            $scope.taskDetailsData = null; //Sets Detail Pannel to null
        }
    }

    $scope.HideDeletedTasks = function () {
        //Toggling --Show data in a previous state that was before applying delete filter.
        if ($scope.selectedTaskListType != null) {

            //Restores the original i.e. data and filter type
            $scope.setFilterType($scope.preSelectedFilterType);
            updateGridsDataFromDatabase($scope.preSelectedTaskSearchResultData);

            $scope.taskDetailsData = null; //Sets Detail Pannel to null
        }
    }

    $scope.ShowDeletedTasksByTeams = function() {
        if ($scope.selectedTeamsIds == "") return;

        var promise = taskService.GetDeletedTasksByTeams($scope.selectedTeamsIds);
        promise.then(function (result) {
            if (result.success) {
                $scope.setFilterType(filterTypes.Delete);
                updateGridsDataFromDatabase(result.data);
            }
        });
    }

    $scope.ShowDeletedTasksByUser = function () {

        if ($scope.selectedUser == null) return;

        var promise = taskService.GetDeletedTasksByUser($scope.selectedUser.Username);
        promise.then(function (result) {
            if (result.success) {
                $scope.setFilterType(filterTypes.Delete);
                updateGridsDataFromDatabase(result.data);
            }
        });
    }

    $scope.deleteBulkTasks = function () {
        var options = {
            "Heading": 'Confirm',
            "Message": 'Are you sure you want to delete these tasks?',
            "ShowYesButton": true,
            "ShowNoButton": true
        };

        var modalInstance = $modal.open({
            scope: $scope,
            templateUrl: 'Angular/Views/NgTemplates/genericConfirmationPopup.html',
            controller: genericConfirmationPopupController,
            resolve: {
                Options: function() {
                    return options;
                }
            }
        });

        modalInstance.result.then(function() {
            if ($scope.taskSelection.length > 0) {
               var taskIds = "";
                angular.forEach($scope.taskSelection, function(task, key) {
                    taskIds = constructQueryString(taskIds) + task.TaskId;
                });

                var promise = taskService.DeleteBulkTasks(taskIds);
                promise.then(function(result) {
                    if (result.success) {
                        $scope.clearTasks();
                        $scope.refreshTaskList();
                       
                    } else {
                        $window.alert('Tasks could not be deleted');
                    }
                }), function() {};
            }
        });
    };

    $scope.sendBulkTasksToOutlook = function () {
        var options = {
            "Heading": 'Confirm',
            "Message": 'Are you sure you want to send the selected tasks to outlook?',
            "ShowYesButton": true,
            "ShowNoButton": true
        };

        var modalInstance = $modal.open({
            scope: $scope,
            templateUrl: 'Angular/Views/NgTemplates/genericConfirmationPopup.html',
            controller: genericConfirmationPopupController,
            resolve: {
                Options: function () {
                    return options;
                }
            }
        });

        modalInstance.result.then(function () {
            if ($scope.taskSelection.length > 0) {
                var taskIds = "";
                angular.forEach($scope.taskSelection, function (task, key) {
                    taskIds = constructQueryString(taskIds) + task.TaskId;
                });

                var promise = taskService.RestoreBulkMessagesToOutlook(taskIds);
                promise.then(function (result) {
                    if (result.success) {
                        $scope.clearTasks();
                        $scope.refreshTaskList();

                    } else {
                        $window.alert('Tasks could not be restored to outlook');
                    }
                });
            }
        }, function() {
                
            });
    };

    $scope.toggleSelection = function(taskItem) {
        var idx = $scope.taskSelection.indexOf(taskItem);
        
        if (idx > -1) {
            $scope.taskSelection.splice(idx, 1);
        }
        else {
            $scope.taskSelection.push(taskItem);
        }
    }

    $scope.clearTasks = function() {
        $scope.taskSelection = [];
        if (bulkDelete) {
            setBulkDelete();
        }
        if (bulkTasksSendToOutlook) {
            setBulkTasksSendToOutlook();
        }
    }

    var getUserDeletePermission = function (task) {
        var loggedInUser = $rootScope.loggedInUser;
        var deleteTaskOwn = loggedInUser.Permissions.DeleteTaskOwn; 
        var deleteTaskOther = loggedInUser.Permissions.DeleteTaskOtherUser; 

        if (
            (deleteTaskOwn && !$.isEmptyObject(task.AssignedUser) && task.AssignedUser.toLowerCase() == loggedInUser.Username.toLowerCase()) ||
                                                                                                                                            deleteTaskOther) {
            $scope.hasUserDeletePermission = true;
        }
    }

    var getUserResetPermission = function () {
        var loggedInUser = $rootScope.loggedInUser;
        var hasResetPermission = loggedInUser.Permissions.ResetTask;

        if (hasResetPermission) {
            $scope.hasUserResetPermission = true;
        }
    }
    
    $scope.checkUserHasNotDeletePermissions = function () {
        var loggedInUser = $rootScope.loggedInUser;

        if (!loggedInUser)
            return false;

       if (loggedInUser.Permissions.DeleteTaskOwn || loggedInUser.Permissions.DeleteTaskOtherUser)
            return false;
        else {
            return true;
        }
    }

    $scope.bulkDeleteCheckBoxDisable = function(task) {
        var loggedInUser = $rootScope.loggedInUser;

        // delete own task permissions
        if (task.AssignedUser && (task.AssignedUser.toLowerCase() == loggedInUser.Username.toLowerCase()) && loggedInUser.Permissions.DeleteTaskOwn)
            return false;
        // delete other tasks permissions
        if (task.AssignedUser && (task.AssignedUser.toLowerCase() != loggedInUser.Username.toLowerCase()) && loggedInUser.Permissions.DeleteTaskOtherUser)
            return false;
        // task assigned to user is null or team and delete others permission
        if (!task.AssignedUser && loggedInUser.Permissions.DeleteTaskOtherUser)
            return false;

        // disable by default
        return true;
    };

    $scope.bulkSendToOutlookCheckBoxDisable = function (task) {

        if (task.TaskTypeId == enums.taskTypes.Email || task.TaskTypeId == enums.taskTypes.CCEmail || task.TaskTypeId == enums.taskTypes.InternalEmail || task.TaskTypeId == enums.taskTypes.InternalCCEmail) {
            return false;
        }

        //default disabled
        return true;
    };

    $scope.ReinstateTask = function (taskId) {
        var promise = taskService.ReinstateTask(taskId);
        promise.then(function(result) {
            if (result.success) {
                $scope.taskDetailsData = null; //To Clear Task Detail section
                $scope.taskSearchResultData.splice($scope.selectedGridItemIndex, 1); //Removes from the current task collection
            }
        });
    }

    $scope.ReAssignTask = function(taskId, urgent) {
        var modalInstance = $modal.open({
            scope: $scope,
            templateUrl: 'Angular/Views/Partials/Forms/_reAssignTask.html',
            controller: reAssignTaskController,
            resolve: {
                taskId: function () {
                    return taskId;
                },
                urgent: function () {
                    return urgent;
                },
                teams: function() {
                    return $scope.teamList;
                },
                users: function() {
                    //users without loggedInUser
                    return $filter('filter')($scope.allUsersList, function (item) {
                        return item.UserId != $rootScope.loggedInUser.UserId;
                    });
                }
            }
        });
        modalInstance.result.then(function (reassignTaskModel) {
            
            var promise = taskService.ReassignTask(reassignTaskModel);
            promise.then(function (result) {
                if (result.success) {
                    //taskDetailsData.DueDate = $filter('date')(new Date(resetTaskSlaModel.DueDate), 'dd/MM/yyyy HH:mm');
                } else {
                    $window.alert('Sorry!! Task could not be reassigned');
                }
            });

        }, function () {
            //Cancel clicked.
        });
    };


    $scope.addTask= function() {
        $window.open(advice2AddTask);
    }

    var clearGridAndTaskDetailData= function ()
    {
        $scope.taskSearchResultData = null; //Clear grid Data
        $scope.taskDetailsData = null; //clear Task Detail Data
    }

    var _init = function () {

        updateDropDownlists();

        $scope.templates = configService.getTemplates();

        $scope.apiUrl = configService.getConfig().apiUrl;

        $scope.teamTaskSearchResultFromDatabase = null;
        $scope.userTaskSearchResultFromDatabase = null;
        $scope.summaryTaskSearchResultFromDatabase = null;

        $scope.taskSearchResultData = null;

        $scope.taskDetailsData = null;
        
        automaticRefreshTime = configService.getConfig().automaticRefreshTime;

        $scope.activityMonitor = {
            "TaskSendToOutlookkInProgress": false, //flag to animate buttons that perfom some invidual actions on task i.e. SendToOutlook, Delete etc
            "TasksSearchByTeamInProgress": false, //flag to animate timeline balls
            "TasksSearchByUserInProgress": false, //flag to animate timeline balls
            "TeamTimeLineSearchInProgress": false,
            "UserTimeLineSearchInProgress": false,
            "TaskDeleteInProgress": false
        };
       
    };

    _init();
};