using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Advice.AutoGeneratedCallService.Contracts;
using Advice.Data.Helpers;
using Advice.Domain.Entities;
using Advice.Domain.Entities.Enums;
using Advice.Domain.Entities.Parameters;
using Advice.Domain.Helper;
using Advice.Domain.RepositoryContracts;

namespace Advice.AutoGeneratedCallService.Implementations
{
    public class ProActiveCallbackTask : Task
    { 
    }

    public class NoaAutoGenerateCallService : AutoGenerateCallService , INoaAutoGenerateCallService
    {

        public NoaAutoGenerateCallService(IJobRepository jobRepository, ITaskRepository taskRepository,ICustomEntityRepository customEntityRepository)
            :base( jobRepository,  taskRepository, customEntityRepository)
        {}

        protected override IEnumerable<Job> GetJobsForWorkingGroup()
        {
            IEnumerable<Job> returnedJobs = _jobRepository.GetOpenJobsForWorkingUserGroupByNatureOfAdviceGroupAndLastActionDate(WorkingHours.GetDateNWorkingDaysInPast(7));

            IEnumerable<Job> suspensionJobs = _jobRepository.GetOpenConductSuspensionJobsForWorkingUserGroupByLastActionDate(WorkingHours.GetDateNWorkingDaysInPast(2));

            return returnedJobs.Union(suspensionJobs);
        }


        protected override IEnumerable<Job> GetJobs()
        {            
            IEnumerable<Job> returnedJobs = _jobRepository.GetOpenJobsByNatureOfAdviceGroupAndLastActionDate( WorkingHours.GetDateNWorkingDaysInPast(7));
                  
            IEnumerable<Job> suspensionJobs = _jobRepository.GetOpenConductSuspensionJobsByLastActionDate( WorkingHours.GetDateNWorkingDaysInPast(2));

            return returnedJobs.Union(suspensionJobs);
        }
    }
}
