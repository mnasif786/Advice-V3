using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Advice.Domain.Entities;
using Advice.Domain.Entities.Enums;
using Advice.Domain.Entities.Parameters;
using Advice.Domain.RepositoryContracts;


namespace Advice.AutoGeneratedCallService.Implementations
{
    public abstract class AutoGenerateCallService
    {
        protected readonly ITaskRepository _taskRepository;
        protected readonly IJobRepository _jobRepository;
        protected readonly ICustomEntityRepository _customEntityRepository;

        public AutoGenerateCallService(IJobRepository jobRepository, ITaskRepository taskRepository,
            ICustomEntityRepository customEntityRepository)
        {
            _taskRepository = taskRepository;
            _jobRepository = jobRepository;
            _customEntityRepository = customEntityRepository;
        }

        public void GenerateTasks()
        {
            TaskTypeSLA taskTypeSla =
                _taskRepository.GetTaskTypeSlaByTaskTypeIdAndDepartmentId((long) TaskTypeIds.ProActiveCallback,
                    (long) Departments.EmploymentServices);

            var jobs = GetJobs();
            var jobsList = jobs as List<Job> ?? jobs.ToList();
            var tasks = jobsList.Select(job =>Task.Create(new ProActiveCallbackTaskParameters(job, taskTypeSla, GetAssignedUserFromJob(job.JobID, job.CreatedBy))));

            _taskRepository.InsertRange(tasks);

            jobsList.ForEach(
                              job =>
                              {
                                  job.MarkAsProActiveCallBackCreated();
                                  _jobRepository.Update(job);
                              }
            );

            _taskRepository.SaveChanges();
        }

        private string GetAssignedUserFromJob(long jobId, string jobCreatedBy)
        {
            return _customEntityRepository.GetAdvisorNameWithMostRecentActionsByJobId(jobId, jobCreatedBy);
        }

        protected abstract IEnumerable<Job> GetJobs();
        protected abstract IEnumerable<Job> GetJobsForWorkingGroup();
    }
}
