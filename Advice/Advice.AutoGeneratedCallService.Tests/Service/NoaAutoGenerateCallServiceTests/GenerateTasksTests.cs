using System;
using System.Collections.Generic;
using System.Linq;

using Advice.AutoGeneratedCallService.Implementations;
using Advice.AutoGeneratedCallService.Tests.Common;
using Advice.Domain.Entities;
using Advice.Domain.Entities.Enums;
using Advice.Domain.Helper;
using Moq;
using NUnit.Framework;

namespace Advice.AutoGeneratedCallService.Tests
{
    [TestFixture]
    public class GenerateTasksTests : BaseNoaAutoGenerateCallServiceTests
    {           
       // TODO: refactor data into base class
        [Test]
        public void Given_Jobs_In_NOAGroup_And_DateRange_When_Get_Jobs_Called_Then_Open_Jobs_Over_7_Days_Since_LastRelatedAction_Are_Returned()
        {        
            var noaGroupData = new List<NatureOfAdviceGroup>()
            {
                new NatureOfAdviceGroup() {NatureOfAdviceGroupID = (long)NatureOfAdviceGroupId.Conduct }                                
            };
            InitMockNatureOfAdviceGroupData(noaGroupData);


            var noaData = new List<NatureOfAdvice>()
            {
                new NatureOfAdvice() {NatureOfAdviceID = (long)NatureOfAdvices.ConductSuspension, NatureOfAdviceGroupID = (long)NatureOfAdviceGroupId.Conduct, NatureOfAdviceGroup = noaGroupData[0]},
            };
            InitMockNatureOfAdviceData(noaData);


            var jobData = new List<Job>()
            {
                new Job()
                {         
                    JobID = 111, Deleted = false, Closed = false, ClientID = 345, ProActiveCallBackCreated = false,                    
                    LastActionDate = DateTime.Today.AddDays(-3), 
                    CurrentNatureOfAdviceID = (long)NatureOfAdvices.ConductSuspension, 
                    NatureOfAdvice = noaData[0],
                    LastModifiedBy = "Kate.Palmer"
                }
            };                     
            InitMockJobData(jobData);

          

            IEnumerable<Task> insertedTasks = null;
            _taskRepository
                .Setup(x => x.InsertRange( It.IsAny<IEnumerable<Task>>() ))
                .Callback<IEnumerable<Task>>(t => insertedTasks = t);

            _jobRepository.Setup(x => x.Update(It.IsAny<Job>())).Callback<Job>(j => jobData[0] = j);

            NoaAutoGenerateCallService service = GetTarget();
            InitMockJobRepositoryMethods(jobData);

            service.GenerateTasks();

            Assert.AreEqual(jobData[0].ProActiveCallBackCreated, true);

            Assert.IsNotNull( insertedTasks );
            Assert.AreEqual( 1, insertedTasks.Count() );
            Assert.AreEqual( (long)TaskTypeIds.ProActiveCallback, insertedTasks.ElementAt(0).TaskTypeID);
            
            Assert.IsNotNull( insertedTasks.ElementAt(0).DueDate ); 
            Assert.AreEqual( WorkingHours.ClosingTime, insertedTasks.ElementAt(0).DueDate.Value.TimeOfDay);           
        }

        [Test]
        public void Given_Jobs_In_NOAGroup_And_DateRange_When_Get_Jobs_Called_Then_No_Duplicate_Jobs_Are_Returned()
        {
            var noaGroupData = new List<NatureOfAdviceGroup>()
            {
                new NatureOfAdviceGroup() {NatureOfAdviceGroupID = (long)NatureOfAdviceGroupId.Conduct }                                
            };
            InitMockNatureOfAdviceGroupData(noaGroupData);


            var noaData = new List<NatureOfAdvice>()
            {
                new NatureOfAdvice() {NatureOfAdviceID = (long)NatureOfAdvices.ConductSuspension, NatureOfAdviceGroupID = (long)NatureOfAdviceGroupId.Conduct, NatureOfAdviceGroup = noaGroupData[0]},
            };
            InitMockNatureOfAdviceData(noaData);
                


            var jobData = new List<Job>()
            {
                // should be returned
                new Job()
                {         
                    JobID = 111, Deleted = false, Closed = false, ClientID = 345, ProActiveCallBackCreated = false,                    
                    LastActionDate = DateTime.Today.AddDays(-3), 
                    CurrentNatureOfAdviceID = (long)NatureOfAdvices.ConductSuspension, 
                    NatureOfAdvice = noaData[0],
                    LastModifiedBy = "Kate.Palmer"
                },

                // should be returned - but only once
                new Job()
                {         
                    JobID = 222, Deleted = false, Closed = false, ClientID = 345, ProActiveCallBackCreated = false,                  
                    LastActionDate = DateTime.Today.AddDays(-10), 
                    CurrentNatureOfAdviceID = (long)NatureOfAdvices.ConductSuspension, 
                    NatureOfAdvice = noaData[0],
                    LastModifiedBy = "Kate.Palmer"
                },

                // should NOT be returned - wrong date
                new Job()
                {         
                    JobID = 333, Deleted = false, Closed = false, ClientID = 345, ProActiveCallBackCreated = false,                    
                    LastActionDate = DateTime.Today.AddDays(-1), 
                    CurrentNatureOfAdviceID = (long)NatureOfAdvices.ConductSuspension, 
                    NatureOfAdvice = noaData[0],
                    LastModifiedBy = "Brin.Wilkinson"
                }

            };
            InitMockJobData(jobData);
           
            IEnumerable<Task> insertedTasks = null;
            _taskRepository
                .Setup(x => x.InsertRange(It.IsAny<IEnumerable<Task>>()))
                .Callback<IEnumerable<Task>>(t => insertedTasks = t);

            _jobRepository.Setup(x => x.Update(It.IsAny<Job>())).Callback<Job>(j => jobData[0] = j);

            NoaAutoGenerateCallService service = GetTarget();
            InitMockJobRepositoryMethods(jobData);

            service.GenerateTasks();

            Assert.AreEqual(jobData[0].ProActiveCallBackCreated, true);

            Assert.IsNotNull(insertedTasks);
            Assert.AreEqual(3, insertedTasks.Count());
            Assert.AreEqual((long)TaskTypeIds.ProActiveCallback, insertedTasks.ElementAt(0).TaskTypeID);
            Assert.AreEqual((long)TaskTypeIds.ProActiveCallback, insertedTasks.ElementAt(1).TaskTypeID);

            
            Assert.IsNotNull(insertedTasks.ElementAt(0).DueDate);
            Assert.AreEqual(WorkingHours.ClosingTime, insertedTasks.ElementAt(0).DueDate.Value.TimeOfDay);

            Assert.IsNotNull(insertedTasks.ElementAt(1).DueDate);
            Assert.AreEqual(WorkingHours.ClosingTime, insertedTasks.ElementAt(1).DueDate.Value.TimeOfDay);
        }


        [Test]
        public void Given_Valid_Job_With_ProActiveCallBackCreated_Set_To_True_Then_Task_Will_Not_Be_Generated_For_Job()
        {
            var noaGroupData = new List<NatureOfAdviceGroup>()
            {
                new NatureOfAdviceGroup() {NatureOfAdviceGroupID = (long)NatureOfAdviceGroupId.Conduct }                                
            };
            InitMockNatureOfAdviceGroupData(noaGroupData);

            var noaData = new List<NatureOfAdvice>()
            {
                new NatureOfAdvice() {NatureOfAdviceID = (long)NatureOfAdvices.ConductSuspension, NatureOfAdviceGroupID = (long)NatureOfAdviceGroupId.Conduct, NatureOfAdviceGroup = noaGroupData[0]},
            };
            InitMockNatureOfAdviceData(noaData);

            var jobData = new List<Job>()
            {
                // should be returned
                new Job()
                {         
                    JobID = 111, Deleted = false, Closed = false, ClientID = 345,                    
                    LastActionDate = DateTime.Today.AddDays(-3), 
                    CurrentNatureOfAdviceID = (long)NatureOfAdvices.ConductSuspension, 
                    NatureOfAdvice = noaData[0],
                    ProActiveCallBackCreated = true
                }              
            };
            InitMockJobData(jobData);


            IEnumerable<Task> insertedTasks = null;
            _taskRepository
                .Setup(x => x.InsertRange(It.IsAny<IEnumerable<Task>>()))
                .Callback<IEnumerable<Task>>(t => insertedTasks = t);

            _jobRepository
                .Setup(x => x.Update(It.IsAny<Job>()))
                .Callback<Job>( j => jobData[0] = j );

            NoaAutoGenerateCallService service = GetTarget();
            service.GenerateTasks();
            Assert.IsNotNull(insertedTasks);
            Assert.AreEqual(0, insertedTasks.Count());                            
        }

        [Test]
        public void Given_Jobs_With_Suspension_NOA_Within_DateRange_When_Get_Jobs_Called_Then_Open_Suspension_Jobs_Over_7_Days_Since_LastRelatedAction_Are_Returned()
        {
            NoaAutoGenerateCallService service = GetTarget();
            var noaGroupData = new List<NatureOfAdviceGroup>()
            {
                new NatureOfAdviceGroup() {NatureOfAdviceGroupID = (long)NatureOfAdviceGroupId.Capability },
                new NatureOfAdviceGroup() {NatureOfAdviceGroupID = (long)NatureOfAdviceGroupId.Conduct }  
            };
            InitMockNatureOfAdviceGroupData(noaGroupData);

            var noaData = new List<NatureOfAdvice>()
            {
                new NatureOfAdvice() {NatureOfAdviceID = 1, NatureOfAdviceGroupID = (long)NatureOfAdviceGroupId.Capability, NatureOfAdviceGroup = noaGroupData[0]},

                /*Suspension con06*/
                new NatureOfAdvice() {NatureOfAdviceID = 411, NatureOfAdviceGroupID = (long)NatureOfAdviceGroupId.Conduct,    NatureOfAdviceGroup = noaGroupData[1]},
            };
            InitMockNatureOfAdviceData(noaData);

            var jobData = new List<Job>()
            {            
                // Should not be returned - too recent
                new Job()
                {               
                    JobID = 333, 
                    Deleted = false, 
                    Closed = false, 
                    ClientID = 345, 
                    ProActiveCallBackCreated = false,
                    LastActionDate = DateTime.Today.AddDays(-1), 
                    CurrentNatureOfAdviceID = 411, 
                    NatureOfAdvice = noaData[1],
                    LastModifiedBy = "Hazel.Metcalf"
                },

                // Should be returned
                // NOTE: LastActionDate is more than the 2 day limit for suspsension but less than 7 day limit for NOA. Long enough to avoid issue with weekend
                new Job()
                {              
                    JobID = 444, 
                    Deleted = false, 
                    Closed = false,
                    ProActiveCallBackCreated = false,
                    LastActionDate = DateTime.Today.AddDays(-5), 
                    CurrentNatureOfAdviceID = 411, 
                    NatureOfAdvice = noaData[1],
                    LastModifiedBy = "Kate.Palmer"
                }
            };
            InitMockJobData(jobData);

            IEnumerable<Task> insertedTasks = null;
            _taskRepository
                .Setup(x => x.InsertRange(It.IsAny<IEnumerable<Task>>()))
                .Callback<IEnumerable<Task>>(t => insertedTasks = t);

            InitMockJobRepositoryMethods(jobData);

            service.GenerateTasks();

            Assert.AreEqual(jobData[0].ProActiveCallBackCreated, true);
            Assert.AreEqual((long)TaskTypeIds.ProActiveCallback, insertedTasks.ElementAt(0).TaskTypeID);            
        }

        private void InitMockJobRepositoryMethods(List<Job> jobData)
        {
            _jobRepository.Setup(
                x => x.GetOpenJobsForWorkingUserGroupByNatureOfAdviceGroupAndLastActionDate(It.IsAny<DateTime>()))
                .Returns(jobData);

            _jobRepository.Setup(
                x => x.GetOpenConductSuspensionJobsForWorkingUserGroupByLastActionDate(It.IsAny<DateTime>()))
                .Returns(jobData);

            _jobRepository.Setup(
                x => x.GetOpenJobsByNatureOfAdviceGroupAndLastActionDate(It.IsAny<DateTime>()))
                .Returns(jobData);

            _jobRepository.Setup(
                x => x.GetOpenConductSuspensionJobsByLastActionDate(It.IsAny<DateTime>()))
                .Returns(jobData);

            _jobRepository.Setup(
                x => x.GetOpenJobsForWorkingUserGroupByNonNatureOfAdviceGroupAndLastActionDate(It.IsAny<DateTime>()))
                .Returns(jobData);

            _jobRepository.Setup(
                x => x.GetOpenJobsByNonNatureOfAdviceGroupAndLastActionDate(It.IsAny<DateTime>()))
                .Returns(jobData);


            _jobRepository.Setup(x => x.Update(It.IsAny<Job>())).Callback<Job>(j => jobData[0] = j);
        }
    }
}
