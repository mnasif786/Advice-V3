using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Advice.AutoGeneratedCallService.Implementations;
using Advice.Data.Common;
using Advice.Data.Contracts;
using Advice.Data.Repository;
using Advice.Data.Tests.TestHelpers;
using Advice.Domain;
using Advice.Domain.Entities;
using Advice.Domain.RepositoryContracts;
using Moq;
using NUnit.Framework;

namespace Advice.AutoGeneratedCallService.Tests.Common
{
    public abstract class BaseNoaAutoGenerateCallServiceTests
    {
        private IAdviceDbContextManager _adviceDbContextManager;
        protected Mock<AdviceEntities> _adviceEntities;
        protected Mock<ITaskRepository> _taskRepository;
        protected Mock<ICustomEntityRepository> _customEntityRepository;

        protected Mock<IJobRepository> _jobRepository;

        protected void InitMockJobData(List<Job> jobData)
        {
            var dbSetMockJobs = DbSetInitialisedMockFactory<Job>.CreateDbSetInitalisedMock(jobData);
            _adviceEntities
                .Setup(x => x.Jobs)
                .Returns(dbSetMockJobs.Object);

            
        }

        protected void InitMockNatureOfAdviceGroupData(List<NatureOfAdviceGroup> natureOfAdviceGroupData)
        {
            var dbSetMockNOAGroups = DbSetInitialisedMockFactory<NatureOfAdviceGroup>.CreateDbSetInitalisedMock(natureOfAdviceGroupData);
            _adviceEntities
                .Setup(x => x.NatureOfAdviceGroups)
                .Returns(dbSetMockNOAGroups.Object);
        }


        protected void InitMockNatureOfAdviceData(List<NatureOfAdvice> natureOfAdviceData)
        {
            var dbSetMockNatureofAdvice = DbSetInitialisedMockFactory<NatureOfAdvice>.CreateDbSetInitalisedMock(natureOfAdviceData);
            _adviceEntities
                .Setup(x => x.NatureOfAdvices)
                .Returns(dbSetMockNatureofAdvice.Object);
        }


        [SetUp]
        public void SetUp()
        {
            _adviceEntities = new Mock<AdviceEntities>();
            _adviceDbContextManager = new AdviceDbContextManager(_adviceEntities.Object);

            _jobRepository = new Mock<IJobRepository>();
            
            _taskRepository = new Mock<ITaskRepository>();

            _customEntityRepository = new Mock<ICustomEntityRepository>();

            _customEntityRepository
                .Setup(x => x.GetAdvisorNameWithMostRecentActionsByJobId(It.IsAny<long>(), "Alan.Donald"))
                .Returns("Fred.Flintstone");


            _taskRepository
                .Setup(x => x.GetTaskTypeSlaByTaskTypeIdAndDepartmentId(It.IsAny<long>(), It.IsAny<long>()))
                .Returns(new TaskTypeSLA()
                {
                    DefaultAcceptableWindow = 10,
                    DefaultWarningWindow = 20,
                    DefaultSLATime = 19 * 60
                });
        }


        [TearDown]
        public void TearDown()
        {
        }


        protected NoaAutoGenerateCallService GetTarget()
        {
            return new NoaAutoGenerateCallService(_jobRepository.Object, _taskRepository.Object, _customEntityRepository.Object);
        }

    }
}
